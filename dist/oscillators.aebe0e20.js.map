{"version":3,"sources":["nodes/oscillators.js"],"names":["window","onload","console","log","Gibberish","workletPath","init","then","export","ArrayNode","addOutput","widget","addWidget","widgets_up","title","prototype","onStart","data","value","setOutputData","JSON","parse","split","onStop","LiteGraph","registerNodeType","OutputNode","addInput","properties","precision","getInputData","source","connect","disconnect","SineNode","sine","Sine","KickNode","kick","Kick","SnareNode","snare","Snare","SequencerNode","values","timings","sequencer","Sequencer","make","start","SquareNode","stop","square","Square","frequency","Add","gain","antialias","SquareNode2","node_square","createNode","pos","graph","add","TriangleNode","triangle","Triangle","node_triangle","SawNode","saw","Saw","node_saw"],"mappings":"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","file":"oscillators.aebe0e20.js","sourceRoot":"../src","sourcesContent":["window.onload = () => {\n  \n  \n  \n  console.log(\"test\");\n  Gibberish.workletPath =\n    \"https://raw.githack.com/gibber-cc/gibberish/v3/dist/gibberish_worklet.js\";\n\n  Gibberish.init().then(() => {\n    console.log(\"Gibb is good\");\n    Gibberish.export(window);\n\n    function ArrayNode() {\n      this.addOutput(\"Array\", \"gibber_array\");\n      this.widget = this.addWidget(\"text\", \"string\", \"\", \"value\");\n      this.widgets_up = true;\n    }\n\n    ArrayNode.title = \"Array\";\n\n    ArrayNode.prototype.onStart = function() {\n      let data = this.widget.value;\n      if (data) {\n        this.setOutputData(0, JSON.parse(\"[\" + data + \"]\"));\n        console.log(data.split(\",\"));\n        console.log(\"array start out\");\n      }\n    };\n\n    ArrayNode.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"array stop out\");\n    };\n\n    LiteGraph.registerNodeType(\"gibber/array\", ArrayNode);\n\n    function OutputNode() {\n      this.addInput(\"Source\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n    }\n\n    OutputNode.title = \"Output\";\n\n    OutputNode.prototype.onStart = function() {\n      let data = this.getInputData(0);\n      if (data && !this.source) {\n        this.source = data;\n        this.source.connect();\n        console.log(\"output connect\");\n      }\n    };\n\n    OutputNode.prototype.onStop = function() {\n      if (this.source) {\n        this.source.disconnect();\n        this.source = false;\n        console.log(\"output disconnect\");\n      }\n    };\n\n    LiteGraph.registerNodeType(\"gibber/output\", OutputNode);\n\n    function SineNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n      this.sine = Sine();\n    }\n\n    //name to show\n    SineNode.title = \"Sine\";\n\n    //function to call when the node is executed\n    SineNode.prototype.onStart = function() {\n      this.setOutputData(0, this.sine);\n      console.log(\"sine output start\");\n    };\n\n    SineNode.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"sine output stop\");\n    };\n\n    //register in the system\n    LiteGraph.registerNodeType(\"gibber/sine\", SineNode);\n\n    function KickNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n    }\n\n    //name to show\n    KickNode.title = \"Kick\";\n\n    //function to call when the node is executed\n    KickNode.prototype.onStart = function() {\n      this.kick = Kick();\n      this.kick.connect();\n      this.setOutputData(0, this.kick);\n\n      console.log(\"kick output start\");\n    };\n\n    KickNode.prototype.onStop = function() {\n      this.kick.disconnect();\n      this.kick = false;\n      this.setOutputData(0, this.kick);\n\n      console.log(\"kick output stop\");\n    };\n\n    //register in the system\n    LiteGraph.registerNodeType(\"gibber/kick\", KickNode);\n\n    function SnareNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n    }\n\n    //name to show\n    SnareNode.title = \"Snare\";\n\n    //function to call when the node is executed\n    SnareNode.prototype.onStart = function() {\n      this.snare = Snare();\n      this.snare.connect();\n      this.setOutputData(0, this.snare);\n\n      console.log(\"snare output start\");\n    };\n\n    SnareNode.prototype.onStop = function() {\n      this.snare.disconnect();\n      this.snare = false;\n      this.setOutputData(0, this.snare);\n\n      console.log(\"snare output stop\");\n    };\n\n    //register in the system\n    LiteGraph.registerNodeType(\"gibber/snare\", SnareNode);\n\n    function SequencerNode() {\n      this.addInput(\"Source\", \"gibber\");\n      this.addInput(\"Values\", \"gibber_array\");\n      this.addInput(\"Timings\", \"gibber_array\");\n    }\n\n    SequencerNode.title = \"Sequencer\";\n\n    SequencerNode.prototype.onStart = function() {\n      let data = this.getInputData(0);\n      let values = this.getInputData(1);\n      let timings = this.getInputData(2);\n      if (data && values && timings) {\n        this.sequencer = Sequencer.make(\n          values,\n          timings,\n          data,\n          \"trigger\"\n        ).start();\n        this.setOutputData(0, this.sequencer);\n        console.log(\"sequencer output start\");\n      }\n    };\n    \n     SquareNode.prototype.onStop = function() {\n      if (this.sequencer) {\n        this.sequencer.stop();\n        this.sequencer = false;\n        this.setOutputData(0, this.sequencer);\n        console.log(\"sequencer output stop\");\n      }\n    };\n\n   \n\n    LiteGraph.registerNodeType(\"gibber/sequencer\", SequencerNode);\n\n   function SquareNode() {\n    this.addInput(\"Source\", \"gibber\");\n    this.addOutput(\"Source\", \"gibber\");\n}\n    SquareNode.title = \"Square\";\n\n    SquareNode.prototype.onStart = function() {\n      let data = this.getInputData(0);\n      if (data && !this.square) {\n        this.square = Square({\n          frequency: Add(440, data),\n          gain: 0.25,\n          antialias: true\n        });\n\n        this.setOutputData(0, this.square);\n        console.log(\"square output start\");\n      }\n    };\n\n    SquareNode.prototype.onStop = function() {\n      if (this.square) {\n        this.square = false;\n        this.setOutputData(0, this.square);\n        console.log(\"square output stop\");\n      }\n    };\n\n    LiteGraph.registerNodeType(\"gibber/square\", SquareNode);\n                  \n                        \n                        \n   function SquareNode2() {\n     this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n      this.square = Square();\n    }\n          \n                        \n  SquareNode2.title = \"Square\";\n\n    SquareNode2.prototype.onStart = function() {\n      this.setOutputData(0, this.square);\n      console.log(\"square output start\");\n    };\n\n    SquareNode2.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"square output stop\");\n    };\n\n    LiteGraph.registerNodeType(\"gibber/square\", SquareNode2);\n\n    var node_square = LiteGraph.createNode(\"gibber/square\");\n    node_square.pos = [400, 200];\n    graph.add(node_square);\n\n    function TriangleNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n      this.triangle = Triangle();\n    }\n\n    TriangleNode.title = \"Triangle\";\n\n    //function to call when the node is executed\n    TriangleNode.prototype.onStart = function() {\n      this.setOutputData(0, this.triangle);\n      console.log(\"triangle output start\");\n    };\n\n    TriangleNode.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"triangle output stop\");\n    };\n\n    LiteGraph.registerNodeType(\"gibber/triangle\", TriangleNode);\n\n    var node_triangle = LiteGraph.createNode(\"gibber/triangle\");\n    node_triangle.pos = [400, 200];\n    graph.add(node_triangle);\n\n    function SawNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n      this.saw = Saw();\n    }\n\n    SawNode.title = \"Saw\";\n\n    //function to call when the node is executed\n    SawNode.prototype.onStart = function() {\n      this.setOutputData(0, this.saw);\n      console.log(\"saw output start\");\n    };\n\n    SawNode.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"saw output stop\");\n    };\n    LiteGraph.registerNodeType(\"gibber/saw\", SawNode);\n\n    var node_saw = LiteGraph.createNode(\"gibber/saw\");\n    node_saw.pos = [400, 200];\n    graph.add(node_saw);\n\n\n    /*     \n    function reverseSawNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n      this.saw = ReverseSaw();\n    }\n\n    ReserveSaw.title = \"ReserveSaw\";\n\n    //function to call when the node is executed\n    reverseSawNode.prototype.onStart = function() {\n      this.setOutputData(0, this.saw);\n      console.log(\"reversesaw output start\");\n    };\n\n    reverseSawNode.prototype.onStop = function() {\n      this.setOutputData(0, false);\n      console.log(\"saw output stop\");\n    };\n    LiteGraph.registerNodeType(\"gibber/reversesaw\", reverseSawNode); //reverse \n\n    var node_rsaw = LiteGraph.createNode(\"gibber/reversesaw\"); //reverse\n    node_rsaw.pos = [400, 200];\n    graph.add(node_rsaw);\n    \n \n  \n  \n  \n  \n  ///need to get Conga to get Cowbell??\n\n    function CowBellNode() {\n      this.addOutput(\"Output\", \"gibber\");\n      this.properties = {\n        precision: 1\n      };\n    }\n\n    CowBellNode.title = \"Cowbell\";\n\n    //function to call when the node is executed\n    CowBellNode.prototype.onStart = function() {\n      this.cowbell = Cowbell();\n      this.cowbell.connect();\n      this.setOutputData(0, this.cowbell);\n\n      console.log(\"cowbell output start\");\n    };\n\n    CowBellNode.prototype.onStop = function() {\n      this.cowbell.disconnect();\n      this.cowbell = false;\n      this.setOutputData(0, this.cowbell);\n\n      console.log(\"cowbell output stop\");\n    };\n\n    //register in the system\n    LiteGraph.registerNodeType(\"gibber/cowbell\", CowBellNode);\n\n    var node_cowbell = LiteGraph.createNode(\"gibber/cowbell\");\n    node_cowbell.pos = [400, 200];\n    graph.add(node_cowbell); */\n  });\n};\n\n"]}